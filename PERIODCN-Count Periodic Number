#include <bits/stdc++.h>
using namespace std;
#define int long long

// Function to convert a binary string to a decimal number
vector<int> binaryToDecimal(const set<string>& binaryStrings) {
    vector<int> decimalNumbers;
    for (const auto& binStr : binaryStrings) {
        // Only convert if the string is not too long
        if (binStr.length() <= 63) {
            decimalNumbers.push_back(stoll(binStr, nullptr, 2)); // Convert binary string to decimal
        }
    }
    return decimalNumbers;
}

signed main() {
    set<string> st;

    // Generate binary strings of length 1 to 31 (still safe for long long)
    for (int i = 1; i <=32; i++) {
        string s(i, '1');
        st.insert(s);
    }

    // Generate binary strings with alternating 1s and 0s for lengths up to 16
    for (int i = 1; i <=16; i++) {
        string pattern = "";
        for (int j = 0; j < 16; j++) {
            string ones = "";
            string zeros = "";
            for (int k = 0; k < i; k++) {
                ones += "1";
                zeros += "0";
            }
            pattern += ones;
            st.insert(pattern);
            pattern += zeros;
            st.insert(pattern);
        }
    }
    // for(auto it : st){
    //     cout<<it<<" ";
    // }

    // Convert binary strings to decimal integers
    vector<int> deci = binaryToDecimal(st);
    sort(deci.begin(), deci.end());
    // for(auto it: deci){
    //     cout<<it<<" ";
    // }
    // Read number of test cases
    int t;
    cin >> t;
    while (t--) {
        int L, R;
        cin >> L >> R;
        int i=0;
        int count=0;
        while(i<deci.size()){
            if(deci[i]>=L && deci[i]<=R){
                count++;
            }
            i++;
        }
        cout<<count<<endl;
    }

    return 0;
}
